{"version":3,"sources":["components/ButtonFetchUsers.js","components/ButtonDelete.js","components/ButtonChat.js","components/UserList.js","components/Search.js","components/Messenger.js","components/App.js","serviceWorker.js","index.js"],"names":["ButtonFetchUsers","props","react_default","a","createElement","className","onClick","click","ButtonDelete","delete","ButtonChat","chat","UserList","term","users","filter","find","name","first","toLowerCase","includes","map","user","key","login","uuid","src","picture","large","alt","last","concat","email","components_ButtonDelete","md5","bind","components_ButtonChat","style","padding","Search","value","onChange","search","placeholder","Messenger","state","messages","newMessage","handleWrite","e","console","log","target","_this","setState","handleSendClick","person","message","_this$props","this","index","Component","API","App","newChat","handleDataFetch","fetch","then","response","json","data","results","prevState","handleDelete","people","Object","toConsumableArray","findIndex","indexMessenger","splice","handleSearch","handleButtonChat","handleButtonCloseChat","_this$state","Fragment","src_components_ButtonFetchUsers","length","src_components_UserList","src_components_Search","src_components_Messenger","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc1f764f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ButtonFetchUsers.css';\r\n\r\nconst ButtonFetchUsers = (props) => {\r\n    return (\r\n        <button className=\"addPerson\" onClick={props.click}><i className=\"fas fa-plus\"></i></button>\r\n    );\r\n}\r\n\r\nexport default ButtonFetchUsers;","import React from 'react';\r\n\r\nconst ButtonDelete = (props) => {\r\n    return (\r\n        <button className=\"delButton\" onClick={props.delete}><i className=\"far fa-trash-alt\"></i> delete</button>\r\n    );\r\n}\r\n\r\nexport default ButtonDelete;","import React from 'react';\r\nconst ButtonChat = (props) => {\r\n    return (\r\n        <button onClick={props.chat} className=\"addbtn\"><i className=\"far fa-comments\"></i></button>\r\n    );\r\n}\r\n\r\nexport default ButtonChat;","import React from 'react';\r\nimport './UserList.css';\r\nimport ButtonDelete from './ButtonDelete.js';\r\nimport ButtonChat from './ButtonChat.js';\r\n\r\nconst UserList = (props) => {\r\n\r\n    function searchingFor(term) {\r\n        return function (props) {\r\n            return props.name.first.toLowerCase().includes(term.toLowerCase()) || !term\r\n        }\r\n    }\r\n\r\n    const users = props.users.filter(searchingFor(props.find)).map(user => (\r\n        <div className=\"person\" key={user.login.uuid}>\r\n            <img src={user.picture.large} alt={user.name.last} />\r\n            <h4>{`${user.name.first} ${user.name.last}`}</h4>\r\n            <p>{user.email}</p>\r\n            <ButtonDelete key={user.login.md5} delete={props.delete.bind(this, user.login.md5)} />\r\n            <ButtonChat key={user.login.uuid} chat={props.chat.bind(this, user.login.uuid)} />\r\n        </div>\r\n    ))\r\n\r\n    return (\r\n        <div style={{ padding: '20px' }} className=\"users\">\r\n            {users}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport './Search.css';\r\n\r\nconst Search = (props) => {\r\n    return (\r\n        <div className=\"search-box\">\r\n            <input value={props.value} onChange={props.search} className=\"search-txt\" placeholder=\"Szukaj osoby...\" />\r\n            <i className=\"fas fa-search search-btn\"></i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport './Messenger.css';\r\n\r\n\r\nclass Messenger extends Component {\r\n    state = {\r\n        messages: [],\r\n        newMessage: '',\r\n    }\r\n\r\n    handleWrite = (e) => {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            newMessage: e.target.value,\r\n        })\r\n    }\r\n    handleSendClick = (person, message) => {\r\n        console.log(\"wyslane\");\r\n        console.log(person, message);\r\n        this.setState({\r\n            newMessage: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { index, chat, users } = this.props;\r\n        const { newMessage } = this.state;\r\n        const person = users.filter((user) => { return user.login.uuid === index });\r\n        return (\r\n            <div className=\"messenger\">\r\n                <div className=\"head\">\r\n                    <p className=\"person\">{person[0].name.first} {person[0].name.last}</p>\r\n                    <i className=\"fas fa-window-minimize minimalize msg-btn\"></i>\r\n                    <i className=\"fas fa-times close  msg-btn\" onClick={chat}></i>\r\n                </div>\r\n                <div className=\"body\"></div>\r\n                <div className=\"bottom\">\r\n                    <textarea className=\"message\" value={newMessage} placeholder=\"Napisz wiadomoÅ›Ä‡...\" onChange={this.handleWrite}></textarea>\r\n                    <i className=\"far fa-share-square send\" onClick={this.handleSendClick.bind(this, this.props.person, this.state.newMessage)}></i>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\nexport default Messenger;","\r\n// //imr lub irmc, cc-nowy komponent klasowy sfc-funkcyjny\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport ButtonFetchUsers from './ButtonFetchUsers.js';\r\nimport UserList from './UserList.js';\r\nimport Search from './Search.js';\r\nimport Messenger from './Messenger.js';\r\n\r\nconst API = 'https://randomuser.me/api/?results=1';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    users: [],\r\n    find: '',\r\n    newChat: false,\r\n  }\r\n\r\n  handleDataFetch = () => {\r\n    fetch(API)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        const user = data.results;\r\n        this.setState(prevState => ({\r\n          users: user.concat(prevState.users)\r\n        }))\r\n      })\r\n  }\r\n\r\n\r\n  handleDelete = (md5) => {\r\n    const people = [...this.state.users];\r\n    const index = people.findIndex(user => user.login.md5 === md5)\r\n    const indexMessenger = people.findIndex(user => user.login.uuid === this.state.newChat)\r\n    people.splice(index, 1)\r\n\r\n    if (indexMessenger === index) {\r\n      this.setState({\r\n        users: people,\r\n        newChat: '',\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        users: people,\r\n      })\r\n    }\r\n  }\r\n\r\n  handleSearch = (e) => {\r\n    this.setState({\r\n      find: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleButtonChat = (uuid) => {\r\n    this.setState({\r\n      newChat: uuid\r\n    })\r\n  }\r\n\r\n  handleButtonCloseChat = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        newChat: ''\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { users, find, newChat } = this.state;\r\n    return (\r\n      <>\r\n        <div className=\"background-image\"></div>\r\n        <ButtonFetchUsers click={this.handleDataFetch} />\r\n        {users.length > 0 ? <UserList chat={this.handleButtonChat} find={find} users={users} delete={this.handleDelete} /> : users}\r\n        <Search value={find} search={this.handleSearch} />\r\n        {newChat ? <Messenger index={newChat} users={users} chat={this.handleButtonCloseChat} /> : null}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render( < App / > , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}